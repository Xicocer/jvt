// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int          @id @default(autoincrement())
  first_name String       @db.VarChar(50)
  last_name  String       @db.VarChar(50)
  patronymic String?      @db.VarChar(50)
  email      String       @unique
  password   String       @db.Text
  img        String?      @db.Text
  role       Boolean      @default(false)
  created_at DateTime     @default(now())
  support    support[]
  MapMarkers MapMarkers[]
  user_pets  user_pets[]
  messages   messages[]
  refresh    refresh[]
}

model MapMarkers {
  id         Int      @id @default(autoincrement())
  name       String   @db.Text
  type       String   @db.VarChar(30)
  address    String   @db.Text
  latitube   Decimal  @db.Decimal(9, 6)
  longitube  Decimal  @db.Decimal(9, 6)
  img        String?  @db.Text
  user       user?    @relation(fields: [user_id], references: [id])
  user_id    Int?
  created_at DateTime @default(now())
}

model user_pets {
  id       Int     @id @default(autoincrement())
  name     String  @db.Text
  age      Int     @db.TinyInt
  gender   Boolean
  user     user?   @relation(fields: [user_id], references: [id])
  user_id  Int?
  breed    breed   @relation(fields: [breed_id], references: [id])
  breed_id Int
}

model pet {
  id    Int     @id @default(autoincrement())
  name  String  @db.Text
  breed breed[]
}

model breed {
  id     Int         @id @default(autoincrement())
  name   String      @db.Text
  pet    pet         @relation(fields: [pet_id], references: [id])
  pet_id Int
  pets   user_pets[]
}

model chat {
  id       Int        @id @default(autoincrement())
  name     String     @db.Text
  type     Boolean
  messages messages[]
}

model messages {
  id      Int    @id @default(autoincrement())
  content String @db.Text
  user    user?  @relation(fields: [user_id], references: [id])
  user_id Int?
  chat    chat?  @relation(fields: [chat_id], references: [id])
  chat_id Int?
}

model refresh {
  id           Int    @id @default(autoincrement())
  refreshtoken String @db.Text
  user         user?  @relation(fields: [user_id], references: [id])
  user_id      Int
}

model support {
  id         Int      @id @default(autoincrement())
  message    String   @db.Text
  type       String   @db.VarChar(50)
  created_at DateTime @default(now())
  user       user?    @relation(fields: [user_id], references: [id])
  user_id    Int?
}